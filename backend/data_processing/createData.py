import os
from pathlib import Path
import shutil
import cv2
from datetime import datetime

class VideoProcessor:
    def __init__(self, input_file="backend/data_processing/input_info.txt", log_dir="backend/data_processing/logs"):
        """Kh·ªüi t·∫°o VideoProcessor v·ªõi c√°c tham s·ªë c∆° b·∫£n"""
        self.input_file = Path(input_file)
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(parents=True, exist_ok=True)

        self.face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

    def log(self, message, student_id=None):
        """Ghi log th√¥ng tin v√†o file log v√† console"""
        timestamp = datetime.now().strftime("[%d/%m/%Y %H:%M:%S]")
        if student_id:
            log_file = self.log_dir / f"{student_id}.log"
        else:
            log_file = self.log_dir / "general.log"
        
        print(f"{timestamp} {message}")
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(f"{timestamp} {message}\n")

    def read_input(self):
        """ƒê·ªçc th√¥ng tin t·ª´ file input_info.txt (ID, T√™n, Video)"""
        students_info = []
        if not self.input_file.exists():
            self.log("‚ùå Kh√¥ng t√¨m th·∫•y file input_info.txt")
            return []

        with open(self.input_file, "r", encoding="utf-8") as f:
            lines = f.readlines()
            for line in lines:
                line = line.strip()
                try:
                    student_id, student_name, video_path = map(str.strip, line.split(";"))
                    students_info.append((student_id, student_name, video_path))
                except ValueError:
                    self.log(f"‚ùå ƒê·ªãnh d·∫°ng kh√¥ng ƒë√∫ng cho d√≤ng: {line}", "general")
                    continue
        
        return students_info

    def save_student_info(self, student_id, student_name, video_path, action="append"):
        """X·ª≠ l√Ω l∆∞u th√¥ng tin sinh vi√™n"""
        students_info = self.read_input()

        if action == "overwrite":
            # Ghi ƒë√® file
            with open(self.input_file, "w", encoding="utf-8") as f:
                f.write(f"{student_id};{student_name};{video_path}\n")
            self.log(f"‚úÖ Th√¥ng tin sinh vi√™n {student_name} ƒë√£ ƒë∆∞·ª£c ghi ƒë√®.")
        
        elif action == "skip":
            # B·ªè qua n·∫øu ƒë√£ t·ªìn t·∫°i
            for student in students_info:
                if student_id == student[0]:  # Ki·ªÉm tra n·∫øu sinh vi√™n ƒë√£ c√≥ trong danh s√°ch
                    self.log(f"‚ùå Sinh vi√™n {student_name} ƒë√£ t·ªìn t·∫°i, b·ªè qua.")
                    return  # B·ªè qua n·∫øu ƒë√£ t·ªìn t·∫°i

            # N·∫øu kh√¥ng c√≥, th√™m m·ªõi
            with open(self.input_file, "a", encoding="utf-8") as f:
                f.write(f"{student_id};{student_name};{video_path}\n")
            self.log(f"‚úÖ Th√¥ng tin sinh vi√™n {student_name} ƒë√£ ƒë∆∞·ª£c th√™m m·ªõi.")
        
        elif action == "append":
            # Th√™m m·ªõi v√†o cu·ªëi file
            with open(self.input_file, "a", encoding="utf-8") as f:
                f.write(f"{student_id};{student_name};{video_path}\n")
            self.log(f"‚úÖ Th√¥ng tin sinh vi√™n {student_name} ƒë√£ ƒë∆∞·ª£c th√™m m·ªõi.")

    def validate_video(self, video_path):
        """Ki·ªÉm tra video c√≥ t·ªìn t·∫°i v√† m·ªü ƒë∆∞·ª£c kh√¥ng"""
        if not Path(video_path).exists():
            self.log(f"‚ùå Video kh√¥ng t·ªìn t·∫°i: {video_path}")
            return False

        cap = cv2.VideoCapture(video_path)
        if not cap.isOpened():
            self.log(f"‚ùå Kh√¥ng th·ªÉ m·ªü video. C√≥ th·ªÉ l·ªói codec ho·∫∑c sai ƒë·ªãnh d·∫°ng: {video_path}")
            return False

        self.log(f"‚úÖ ƒê√£ m·ªü video th√†nh c√¥ng: {video_path}")
        return cap

    def save_face(self, frame, student_id, student_name, count):
        """L∆∞u khu√¥n m·∫∑t ƒë√£ ph√°t hi·ªán v√†o th∆∞ m·ª•c v·ªõi k√≠ch th∆∞·ªõc 200x200"""
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        
        # Ph√°t hi·ªán khu√¥n m·∫∑t
        faces = self.face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)
        
        for (x, y, w, h) in faces:
            # C·∫Øt khu√¥n m·∫∑t t·ª´ ·∫£nh
            face = frame[y:y+h, x:x+w]
            
            # Resize khu√¥n m·∫∑t v·ªÅ k√≠ch th∆∞·ªõc 200x200
            face_resized = cv2.resize(face, (200, 200))
            
            # T·∫°o th∆∞ m·ª•c cho sinh vi√™n n·∫øu ch∆∞a c√≥
            student_folder = Path(f"data/{student_id}_{student_name}")
            student_folder.mkdir(parents=True, exist_ok=True)
            
            # L∆∞u ·∫£nh khu√¥n m·∫∑t v√†o th∆∞ m·ª•c v·ªõi t√™n l√† 'ID_H·ªç v√† T√™n.jpg'
            image_path = student_folder / f"{student_id}_{student_name}.jpg"
            cv2.imwrite(str(image_path), face_resized)
            self.log(f"‚úÖ L∆∞u ·∫£nh khu√¥n m·∫∑t: {image_path}", student_id)
            return True  # Sau khi l∆∞u m·ªôt ·∫£nh th√¨ return ngay

        return False  # Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t

    def process_video(self, student_id, student_name, video_path):
        """X·ª≠ l√Ω video, ph√°t hi·ªán khu√¥n m·∫∑t v√† l∆∞u ·∫£nh"""
        cap = self.validate_video(video_path)
        if not cap:
            return

        frame_count = 0
        saved_count = 0
        self.log(f"‚ñ∂Ô∏è ƒêang ƒë·ªçc t·ª´ng frame video cho {student_name} - ID: {student_id}", student_id)

        while True:
            ret, frame = cap.read()
            if not ret:
                self.log(f"üìâ K·∫øt th√∫c video ho·∫∑c kh√¥ng ƒë·ªçc ƒë∆∞·ª£c frame cho {student_name} - ID: {student_id}", student_id)
                break

            frame_count += 1
            # L∆∞u ·∫£nh khu√¥n m·∫∑t t·ª´ video
            if self.save_face(frame, student_id, student_name, saved_count + 1):
                saved_count += 1

            # D·ª´ng n·∫øu ƒë√£ ƒë·ªß ·∫£nh (v√≠ d·ª•: 30 ·∫£nh)
            if saved_count >= 30:
                break

        cap.release()
        cv2.destroyAllWindows()
        self.log(f"‚úÖ ƒê√£ l∆∞u {saved_count} khu√¥n m·∫∑t t·ª´ video cho {student_name} - ID: {student_id}", student_id)

    def save_video(self, student_id, student_name, video_path):
        """Sao ch√©p video v√†o th∆∞ m·ª•c 'Getting_data_video' v·ªõi t√™n th∆∞ m·ª•c l√† m√£ s·ªë sinh vi√™n v√† t√™n"""
        folder_name = f"{student_id}_{student_name}"
        destination_folder = Path(f"Getting_data_video/{folder_name}")
        
        # Ki·ªÉm tra n·∫øu th∆∞ m·ª•c con ƒë√£ t·ªìn t·∫°i
        if destination_folder.exists():
            self.log(f"‚ùå Th∆∞ m·ª•c {folder_name} ƒë√£ t·ªìn t·∫°i, b·ªè qua video.", student_id)
            return  # B·ªè qua n·∫øu th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i, kh√¥ng sao ch√©p video
        else:
            destination_folder.mkdir(parents=True, exist_ok=True)
            self.log(f"‚úÖ T·∫°o th∆∞ m·ª•c {folder_name} th√†nh c√¥ng.", student_id)
        
        video_filename = Path(video_path).name  # L·∫•y t√™n file video
        new_video_path = destination_folder / video_filename
        
        try:
            shutil.copy(video_path, new_video_path)  # Sao ch√©p video v√†o th∆∞ m·ª•c
            self.log(f"‚úÖ Video ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o: {new_video_path}", student_id)
        except Exception as e:
            self.log(f"‚ùå ƒê√£ x·∫£y ra l·ªói khi sao ch√©p video: {e}", student_id)

    def run(self):
        """Ch·∫°y qu√° tr√¨nh x·ª≠ l√Ω video cho t·∫•t c·∫£ video trong th∆∞ m·ª•c Getting_data_video"""
        videos_processed = 0
        for student_folder in Path("Getting_data_video").iterdir():
            if student_folder.is_dir():
                student_id, student_name = student_folder.name.split('_', 1)
                for video_file in student_folder.glob("*.mp4"):
                    self.process_video(student_id, student_name, video_file)  # X·ª≠ l√Ω video
                    videos_processed += 1

        if videos_processed > 0:
            self.log("‚úÖ Ho√†n th√†nh t·∫°o d·ªØ li·ªáu.", "general")
        else:
            self.log("‚ùå Kh√¥ng c√≥ video n√†o ƒë∆∞·ª£c x·ª≠ l√Ω.", "general")

if __name__ == "__main__":
    processor = VideoProcessor()
    processor.run()
