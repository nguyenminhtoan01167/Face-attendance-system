import os
import cv2
import face_recognition
import pickle
from datetime import datetime
from pathlib import Path

# ========== CONFIGURATION ==========
DATASET_DIR = Path("data")                           # Th∆∞ m·ª•c ch·ª©a d·ªØ li·ªáu ·∫£nh sinh vi√™n
ENCODING_FILE = Path("backend/training/encodings.pickle")  # File l∆∞u encoding
LOG_FILE = Path("backend/training/training.log")     # Ghi nh·∫≠t k√Ω training

# ========== UTILITY FUNCTIONS ==========

def log(message):
    timestamp = datetime.now().strftime("[%d/%m/%Y %H:%M:%S]")
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"{timestamp} {message}\n")
    print(f"{timestamp} {message}")

def is_image_file(file_name):
    return file_name.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp'))

def encode_face_from_image(image_path):
    """ƒê·ªçc ·∫£nh, ph√°t hi·ªán v√† m√£ h√≥a khu√¥n m·∫∑t."""
    image = cv2.imread(str(image_path))
    if image is None:
        log(f"‚ùå Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh: {image_path}")
        return None

    rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    boxes = face_recognition.face_locations(rgb, model="hog")  # model="cnn" n·∫øu b·∫°n c√≥ GPU m·∫°nh
    if not boxes:
        log(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t trong ·∫£nh: {image_path}")
        return None

    encodings = face_recognition.face_encodings(rgb, boxes)
    return encodings[0] if encodings else None

# ========== MAIN FUNCTION ==========

def train_all_faces():
    known_encodings = []
    known_names = []

    if not DATASET_DIR.exists():
        log("‚ùå Th∆∞ m·ª•c d·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i.")
        return

    student_dirs = [d for d in DATASET_DIR.iterdir() if d.is_dir()]
    if not student_dirs:
        log("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu sinh vi√™n trong th∆∞ m·ª•c data/")
        return

    log(f"üöÄ B·∫Øt ƒë·∫ßu training khu√¥n m·∫∑t t·ª´ {len(student_dirs)} sinh vi√™n...")

    for student_folder in student_dirs:
        student_name = student_folder.name
        image_files = [f for f in student_folder.iterdir() if is_image_file(f.name)]

        if not image_files:
            log(f"‚ö†Ô∏è Kh√¥ng c√≥ ·∫£nh h·ª£p l·ªá trong th∆∞ m·ª•c: {student_name}")
            continue

        log(f"üßë Sinh vi√™n: {student_name} ({len(image_files)} ·∫£nh)")

        for img_path in image_files:
            encoding = encode_face_from_image(img_path)
            if encoding is not None:
                known_encodings.append(encoding)
                known_names.append(student_name)

    if not known_encodings:
        log("‚ùå Kh√¥ng c√≥ encoding n√†o ƒë∆∞·ª£c t·∫°o.")
        return

    # L∆∞u k·∫øt qu·∫£ v√†o pickle
    encoding_data = {
        "encodings": known_encodings,
        "names": known_names
    }

    ENCODING_FILE.parent.mkdir(parents=True, exist_ok=True)
    with open(ENCODING_FILE, "wb") as f:
        pickle.dump(encoding_data, f)

    log(f"‚úÖ Training ho√†n t·∫•t. T·ªïng c·ªông {len(known_encodings)} khu√¥n m·∫∑t ƒë√£ ƒë∆∞·ª£c m√£ h√≥a.")
    log(f"üíæ D·ªØ li·ªáu l∆∞u t·∫°i: {ENCODING_FILE}")

# ========== RUN ==========
if __name__ == "__main__":
    log("========== B·∫ÆT ƒê·∫¶U HU·∫§N LUY·ªÜN ==========")
    train_all_faces()
    log("========== K·∫æT TH√öC ==========")
